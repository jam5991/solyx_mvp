name: Solyx AI CI Pipeline

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]

env:
  PYTHON_VERSION: '3.9'

jobs:
  code-quality:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort mypy
          pip install -r requirements.txt

      - name: Run linters and formatters
        run: |
          black --check src/
          isort --check-only src/
          flake8 src/
          mypy src/

  unit-tests:
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Run unit tests
        run: |
          pytest tests/unit --cov=src --cov-report=xml

      - name: Upload coverage report
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml

  integration-tests:
    runs-on: ubuntu-latest
    needs: unit-tests
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Set up k3d cluster
        run: |
          wget -q -O - https://raw.githubusercontent.com/k3d-io/k3d/main/install.sh | bash
          k3d cluster create test-cluster

      - name: Run integration tests
        run: |
          pip install -r requirements.txt
          pytest tests/integration

  build:
    runs-on: ubuntu-latest
    needs: [integration-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push DRM
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./src/drm/Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository }}/drm:latest
            ghcr.io/${{ github.repository }}/drm:${{ github.sha }}

      - name: Build and push CMO
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./src/cmo/Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository }}/cmo:latest
            ghcr.io/${{ github.repository }}/cmo:${{ github.sha }}

      - name: Build and push SDN Controller
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./src/sdn/Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository }}/sdn:latest
            ghcr.io/${{ github.repository }}/sdn:${{ github.sha }}

  security-scan:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'ghcr.io/${{ github.repository }}/drm:${{ github.sha }}'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
